// Financial Payment Models
model PaymentTransaction {
  id               String            @id @default(uuid())
  amount           Decimal           @db.Decimal(10, 2)
  currency         String            @default("USD")
  status           PaymentStatusType
  paymentMethod    PaymentMethodType
  type             TransactionType
  paymentReference String? // External payment reference (e.g., Stripe payment ID)
  description      String?
  metadata         Json? // Additional payment metadata
  client           Client            @relation(fields: [clientId], references: [id])
  clientId         Int
  invoice          Invoice?          @relation(fields: [invoiceId], references: [id])
  invoiceId        Int?
  subscription     Subscription?     @relation(fields: [subscriptionId], references: [id])
  subscriptionId   String?
  billingAddress   BillingAddress?   @relation(fields: [billingAddressId], references: [id])
  billingAddressId String?
  refundedAmount   Decimal?          @db.Decimal(10, 2)
  refundReason     String?
  refundedAt       DateTime?
  paymentProcessor String            @default("STRIPE") // STRIPE, PAYPAL, etc.
  processorFee     Decimal?          @db.Decimal(10, 2)
  netAmount        Decimal?          @db.Decimal(10, 2)
  taxAmount        Decimal?          @db.Decimal(10, 2)
  taxRate          Decimal?          @db.Decimal(5, 2)
  createdAt        DateTime          @default(now())
  updatedAt        DateTime          @updatedAt
  paymentAttempts  PaymentAttempt[]
  billingHistory   BillingHistory[]

  @@index([clientId])
  @@index([invoiceId])
  @@index([subscriptionId])
  @@index([status])
  @@index([createdAt])
}

model PaymentAttempt {
  id                   String             @id @default(uuid())
  paymentTransaction   PaymentTransaction @relation(fields: [paymentTransactionId], references: [id])
  paymentTransactionId String
  status               PaymentStatusType
  errorCode            String?
  errorMessage         String?
  gatewayResponse      Json? // Raw response from payment gateway
  attemptedAt          DateTime           @default(now())

  @@index([paymentTransactionId])
  @@index([status])
}

model BillingAddress {
  id                  String               @id @default(uuid())
  addressLine1        String
  addressLine2        String?
  city                String
  state               String?
  postalCode          String
  country             String
  isDefault           Boolean              @default(false)
  client              Client               @relation(fields: [clientId], references: [id])
  clientId            Int
  paymentTransactions PaymentTransaction[]
  createdAt           DateTime             @default(now())
  updatedAt           DateTime             @updatedAt

  @@index([clientId])
}

model BillingHistory {
  id                   String              @id @default(uuid())
  client               Client              @relation(fields: [clientId], references: [id])
  clientId             Int
  subscription         Subscription?       @relation(fields: [subscriptionId], references: [id])
  subscriptionId       String?
  invoice              Invoice?            @relation(fields: [invoiceId], references: [id])
  invoiceId            Int?
  paymentTransaction   PaymentTransaction? @relation(fields: [paymentTransactionId], references: [id])
  paymentTransactionId String?
  eventType            BillingEventType
  amount               Decimal             @db.Decimal(10, 2)
  description          String
  metadata             Json?
  createdAt            DateTime            @default(now())

  @@index([clientId])
  @@index([subscriptionId])
  @@index([invoiceId])
  @@index([paymentTransactionId])
  @@index([eventType])
  @@index([createdAt])
}

model FinancialSummary {
  id                      String   @id @default(uuid())
  period                  String // Format: YYYY-MM
  totalRevenue            Decimal  @db.Decimal(12, 2)
  subscriptionRevenue     Decimal  @db.Decimal(12, 2)
  oneTimeRevenue          Decimal  @db.Decimal(12, 2)
  refundAmount            Decimal  @db.Decimal(12, 2)
  processingFees          Decimal  @db.Decimal(12, 2)
  netRevenue              Decimal  @db.Decimal(12, 2)
  taxCollected            Decimal  @db.Decimal(12, 2)
  newSubscriptions        Int
  canceledSubscriptions   Int
  renewedSubscriptions    Int
  upgradedSubscriptions   Int
  downgradedSubscriptions Int
  createdAt               DateTime @default(now())
  updatedAt               DateTime @updatedAt

  @@unique([period])
  @@index([period])
}

model TaxRate {
  id         String   @id @default(uuid())
  country    String
  state      String?
  postalCode String?
  rate       Decimal  @db.Decimal(5, 2)
  taxType    String // VAT, GST, Sales Tax, etc.
  isDefault  Boolean  @default(false)
  isActive   Boolean  @default(true)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@unique([country, state, postalCode, taxType])
  @@index([country, state, postalCode])
}

model Invoice {
  id                  Int                  @id @default(autoincrement())
  amount              Int
  lateFeeAmount       Int? // Calculated from subscription.lateFeePercentage
  discountAmount      Int? // Calculated from subscription.discountPercentage
  issuedAt            DateTime
  dueDate             DateTime?
  status              PaymentStatusType
  paymentInformation  PaymentInformation[]
  subscription        Subscription         @relation(fields: [subscriptionId], references: [id])
  subscriptionId      String
  paymentTransactions PaymentTransaction[]
  billingHistory      BillingHistory[]
  invoiceItems        InvoiceItem[]
  invoiceNumber       String               @unique
  notes               String?
  taxAmount           Int?
  totalAmount         Int
  pdfUrl              String?
  sentAt              DateTime?
  viewedAt            DateTime?
  reminderSentAt      DateTime?
}

model InvoiceItem {
  id          String  @id @default(uuid())
  invoice     Invoice @relation(fields: [invoiceId], references: [id])
  invoiceId   Int
  description String
  quantity    Int
  unitPrice   Decimal @db.Decimal(10, 2)
  amount      Decimal @db.Decimal(10, 2)
  taxable     Boolean @default(true)
  metadata    Json?

  @@index([invoiceId])
}
