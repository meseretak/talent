
/* !!! This is code generated by Prisma. Do not edit directly. !!!
/* eslint-disable */

Object.defineProperty(exports, "__esModule", { value: true });

const {
  Decimal,
  objectEnumValues,
  makeStrictEnum,
  Public,
  getRuntime,
  skip
} = require('./runtime/index-browser.js')


const Prisma = {}

exports.Prisma = Prisma
exports.$Enums = {}

/**
 * Prisma Client JS version: 6.10.1
 * Query Engine version: 9b628578b3b7cae625e8c927178f15a170e74a9c
 */
Prisma.prismaVersion = {
  client: "6.10.1",
  engine: "9b628578b3b7cae625e8c927178f15a170e74a9c"
}

Prisma.PrismaClientKnownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientKnownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)};
Prisma.PrismaClientUnknownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientUnknownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientRustPanicError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientRustPanicError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientInitializationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientInitializationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientValidationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientValidationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`sqltag is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.empty = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`empty is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.join = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`join is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.raw = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`raw is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.validator = Public.validator

/**
* Extensions
*/
Prisma.getExtensionContext = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.getExtensionContext is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.defineExtension = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.defineExtension is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}



/**
 * Enums
 */

exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  ReadUncommitted: 'ReadUncommitted',
  ReadCommitted: 'ReadCommitted',
  RepeatableRead: 'RepeatableRead',
  Serializable: 'Serializable'
});

exports.Prisma.AdminScalarFieldEnum = {
  id: 'id'
};

exports.Prisma.ChatMessageScalarFieldEnum = {
  id: 'id',
  message: 'message',
  messageType: 'messageType',
  senderId: 'senderId',
  recipientId: 'recipientId',
  roomId: 'roomId',
  sentAt: 'sentAt',
  editedAt: 'editedAt',
  readAt: 'readAt',
  status: 'status',
  reactions: 'reactions',
  attachmentId: 'attachmentId',
  mediaContent: 'mediaContent',
  replyTo: 'replyTo',
  forwardedFrom: 'forwardedFrom',
  mentions: 'mentions',
  metadata: 'metadata'
};

exports.Prisma.ChatRoomScalarFieldEnum = {
  id: 'id',
  name: 'name',
  description: 'description',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  lastMessageAt: 'lastMessageAt',
  isGroupChat: 'isGroupChat',
  groupChatId: 'groupChatId',
  chatType: 'chatType',
  adminId: 'adminId',
  mutedParticipants: 'mutedParticipants',
  isTyping: 'isTyping',
  pinnedMessages: 'pinnedMessages',
  settings: 'settings',
  metadata: 'metadata',
  projectId: 'projectId'
};

exports.Prisma.NotificationScalarFieldEnum = {
  id: 'id',
  type: 'type',
  content: 'content',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  readAt: 'readAt',
  recipientId: 'recipientId',
  senderId: 'senderId',
  userId: 'userId',
  entityType: 'entityType',
  entityId: 'entityId'
};

exports.Prisma.NotificationTemplateScalarFieldEnum = {
  id: 'id',
  name: 'name',
  type: 'type',
  subject: 'subject',
  bodyTemplate: 'bodyTemplate',
  variables: 'variables',
  isActive: 'isActive',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.ClientScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  companyName: 'companyName',
  companyWebsite: 'companyWebsite',
  billingAddressId: 'billingAddressId',
  contactPersonId: 'contactPersonId',
  referralCode: 'referralCode',
  clientType: 'clientType',
  statisticsInformationId: 'statisticsInformationId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  defaultPaymentMethod: 'defaultPaymentMethod',
  taxExempt: 'taxExempt',
  taxId: 'taxId',
  stripeCustomerId: 'stripeCustomerId'
};

exports.Prisma.ContactPersonScalarFieldEnum = {
  id: 'id',
  fullName: 'fullName',
  email: 'email',
  phoneNumber: 'phoneNumber',
  position: 'position'
};

exports.Prisma.ContractScalarFieldEnum = {
  id: 'id',
  clientId: 'clientId',
  projectId: 'projectId',
  startDate: 'startDate',
  endDate: 'endDate',
  termsAndConditions: 'termsAndConditions',
  signedAt: 'signedAt',
  signedById: 'signedById'
};

exports.Prisma.FileScalarFieldEnum = {
  id: 'id',
  uuid: 'uuid',
  fileName: 'fileName',
  description: 'description',
  fileURL: 'fileURL',
  fileSize: 'fileSize',
  fileType: 'fileType',
  storageProvider: 'storageProvider',
  bucket: 'bucket',
  objectType: 'objectType',
  objectId: 'objectId',
  metadata: 'metadata',
  uploadedById: 'uploadedById',
  uploadedAt: 'uploadedAt',
  deletedAt: 'deletedAt'
};

exports.Prisma.PaymentTransactionScalarFieldEnum = {
  id: 'id',
  amount: 'amount',
  currency: 'currency',
  status: 'status',
  paymentMethod: 'paymentMethod',
  type: 'type',
  paymentReference: 'paymentReference',
  description: 'description',
  metadata: 'metadata',
  clientId: 'clientId',
  invoiceId: 'invoiceId',
  subscriptionId: 'subscriptionId',
  billingAddressId: 'billingAddressId',
  refundedAmount: 'refundedAmount',
  refundReason: 'refundReason',
  refundedAt: 'refundedAt',
  paymentProcessor: 'paymentProcessor',
  processorFee: 'processorFee',
  netAmount: 'netAmount',
  taxAmount: 'taxAmount',
  taxRate: 'taxRate',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.PaymentAttemptScalarFieldEnum = {
  id: 'id',
  paymentTransactionId: 'paymentTransactionId',
  status: 'status',
  errorCode: 'errorCode',
  errorMessage: 'errorMessage',
  gatewayResponse: 'gatewayResponse',
  attemptedAt: 'attemptedAt'
};

exports.Prisma.BillingAddressScalarFieldEnum = {
  id: 'id',
  addressLine1: 'addressLine1',
  addressLine2: 'addressLine2',
  city: 'city',
  state: 'state',
  postalCode: 'postalCode',
  country: 'country',
  isDefault: 'isDefault',
  clientId: 'clientId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.BillingHistoryScalarFieldEnum = {
  id: 'id',
  clientId: 'clientId',
  subscriptionId: 'subscriptionId',
  invoiceId: 'invoiceId',
  paymentTransactionId: 'paymentTransactionId',
  eventType: 'eventType',
  amount: 'amount',
  description: 'description',
  metadata: 'metadata',
  createdAt: 'createdAt'
};

exports.Prisma.FinancialSummaryScalarFieldEnum = {
  id: 'id',
  period: 'period',
  totalRevenue: 'totalRevenue',
  subscriptionRevenue: 'subscriptionRevenue',
  oneTimeRevenue: 'oneTimeRevenue',
  refundAmount: 'refundAmount',
  processingFees: 'processingFees',
  netRevenue: 'netRevenue',
  taxCollected: 'taxCollected',
  newSubscriptions: 'newSubscriptions',
  canceledSubscriptions: 'canceledSubscriptions',
  renewedSubscriptions: 'renewedSubscriptions',
  upgradedSubscriptions: 'upgradedSubscriptions',
  downgradedSubscriptions: 'downgradedSubscriptions',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.TaxRateScalarFieldEnum = {
  id: 'id',
  country: 'country',
  state: 'state',
  postalCode: 'postalCode',
  rate: 'rate',
  taxType: 'taxType',
  isDefault: 'isDefault',
  isActive: 'isActive',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.InvoiceScalarFieldEnum = {
  id: 'id',
  amount: 'amount',
  lateFeeAmount: 'lateFeeAmount',
  discountAmount: 'discountAmount',
  issuedAt: 'issuedAt',
  dueDate: 'dueDate',
  status: 'status',
  subscriptionId: 'subscriptionId',
  invoiceNumber: 'invoiceNumber',
  notes: 'notes',
  taxAmount: 'taxAmount',
  totalAmount: 'totalAmount',
  pdfUrl: 'pdfUrl',
  sentAt: 'sentAt',
  viewedAt: 'viewedAt',
  reminderSentAt: 'reminderSentAt'
};

exports.Prisma.InvoiceItemScalarFieldEnum = {
  id: 'id',
  invoiceId: 'invoiceId',
  description: 'description',
  quantity: 'quantity',
  unitPrice: 'unitPrice',
  amount: 'amount',
  taxable: 'taxable',
  metadata: 'metadata'
};

exports.Prisma.FreelancerScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  headline: 'headline',
  bio: 'bio',
  about: 'about',
  featuredFreelancer: 'featuredFreelancer',
  rank: 'rank',
  status: 'status',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  availabilityId: 'availabilityId',
  statisticsInformationId: 'statisticsInformationId',
  terminationInformationId: 'terminationInformationId',
  profilePhoto: 'profilePhoto',
  bannerPhoto: 'bannerPhoto'
};

exports.Prisma.SkillScalarFieldEnum = {
  id: 'id',
  name: 'name',
  description: 'description',
  type: 'type',
  videoType: 'videoType',
  programmingType: 'programmingType',
  designType: 'designType',
  writingType: 'writingType',
  marketingType: 'marketingType'
};

exports.Prisma.CategoryScalarFieldEnum = {
  id: 'id',
  name: 'name',
  description: 'description'
};

exports.Prisma.CertificationScalarFieldEnum = {
  id: 'id',
  name: 'name',
  issuingOrganization: 'issuingOrganization',
  issueDate: 'issueDate',
  expirationDate: 'expirationDate',
  credentialId: 'credentialId',
  freelancerId: 'freelancerId'
};

exports.Prisma.WorkHistoryScalarFieldEnum = {
  id: 'id',
  companyName: 'companyName',
  position: 'position',
  startDate: 'startDate',
  endDate: 'endDate',
  description: 'description',
  freelancerId: 'freelancerId'
};

exports.Prisma.AvailabilityScalarFieldEnum = {
  id: 'id',
  status: 'status',
  availableHoursPerWeek: 'availableHoursPerWeek',
  unavailableUntil: 'unavailableUntil',
  notes: 'notes'
};

exports.Prisma.TerminationInformationScalarFieldEnum = {
  id: 'id',
  terminatedAt: 'terminatedAt',
  terminatedReason: 'terminatedReason',
  isTerminated: 'isTerminated',
  terminationType: 'terminationType',
  userId: 'userId'
};

exports.Prisma.PortfolioItemScalarFieldEnum = {
  id: 'id',
  title: 'title',
  description: 'description',
  imageURL: 'imageURL',
  projectURL: 'projectURL',
  freelancerId: 'freelancerId'
};

exports.Prisma.PaymentInformationScalarFieldEnum = {
  id: 'id',
  bankAccountNumber: 'bankAccountNumber',
  bankAccountName: 'bankAccountName',
  bankName: 'bankName',
  currency: 'currency',
  bankAccountType: 'bankAccountType',
  paymentMethod: 'paymentMethod',
  paymentFrequency: 'paymentFrequency',
  paymentAmount: 'paymentAmount',
  paymentDate: 'paymentDate',
  taxId: 'taxId',
  taxCountry: 'taxCountry',
  taxState: 'taxState',
  taxAddress: 'taxAddress',
  taxPercentage: 'taxPercentage',
  freelancerId: 'freelancerId',
  taxInformationId: 'taxInformationId',
  invoiceId: 'invoiceId'
};

exports.Prisma.StatisticsInformationScalarFieldEnum = {
  id: 'id',
  totalEarnings: 'totalEarnings',
  totalProjects: 'totalProjects',
  totalTasks: 'totalTasks',
  totalReviews: 'totalReviews',
  totalRating: 'totalRating',
  totalClients: 'totalClients',
  totalJobsCompleted: 'totalJobsCompleted',
  totalJobsOngoing: 'totalJobsOngoing',
  totalJobsPending: 'totalJobsPending',
  totalJobsCancelled: 'totalJobsCancelled',
  totalJobsOnHold: 'totalJobsOnHold',
  totalStorageUsed: 'totalStorageUsed'
};

exports.Prisma.ClientHiredFreelancerScalarFieldEnum = {
  clientId: 'clientId',
  freelancerId: 'freelancerId',
  hiredAt: 'hiredAt',
  status: 'status',
  terminatedAt: 'terminatedAt',
  terminationReason: 'terminationReason'
};

exports.Prisma.ReviewScalarFieldEnum = {
  id: 'id',
  rating: 'rating',
  reviewText: 'reviewText',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  projectId: 'projectId',
  reviewerId: 'reviewerId',
  comment: 'comment',
  freelancerId: 'freelancerId',
  clientId: 'clientId'
};

exports.Prisma.LibraryResourceScalarFieldEnum = {
  id: 'id',
  title: 'title',
  description: 'description',
  content: 'content',
  keyPoints: 'keyPoints',
  status: 'status',
  difficulty: 'difficulty',
  duration: 'duration',
  views: 'views',
  allowComments: 'allowComments',
  thumbnailUrl: 'thumbnailUrl',
  publishedAt: 'publishedAt',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  authorId: 'authorId',
  categoryId: 'categoryId'
};

exports.Prisma.LibrarySectionScalarFieldEnum = {
  id: 'id',
  title: 'title',
  content: 'content',
  order: 'order',
  imageUrl: 'imageUrl',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  resourceId: 'resourceId'
};

exports.Prisma.LibraryAttachmentScalarFieldEnum = {
  id: 'id',
  name: 'name',
  description: 'description',
  url: 'url',
  type: 'type',
  size: 'size',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  resourceId: 'resourceId'
};

exports.Prisma.LibraryResourceRelationScalarFieldEnum = {
  id: 'id',
  resourceId: 'resourceId',
  relatedToId: 'relatedToId',
  createdAt: 'createdAt'
};

exports.Prisma.LibraryCommentScalarFieldEnum = {
  id: 'id',
  content: 'content',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  userId: 'userId',
  resourceId: 'resourceId'
};

exports.Prisma.LibraryReplyScalarFieldEnum = {
  id: 'id',
  content: 'content',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  userId: 'userId',
  commentId: 'commentId'
};

exports.Prisma.LibraryReactionScalarFieldEnum = {
  id: 'id',
  type: 'type',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  userId: 'userId',
  commentId: 'commentId',
  replyId: 'replyId'
};

exports.Prisma.LibraryProgressScalarFieldEnum = {
  id: 'id',
  percentage: 'percentage',
  completed: 'completed',
  lastAccessed: 'lastAccessed',
  completedAt: 'completedAt',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  userId: 'userId',
  resourceId: 'resourceId'
};

exports.Prisma.LibraryFavoriteScalarFieldEnum = {
  id: 'id',
  createdAt: 'createdAt',
  userId: 'userId',
  resourceId: 'resourceId'
};

exports.Prisma.LibraryPinScalarFieldEnum = {
  id: 'id',
  createdAt: 'createdAt',
  userId: 'userId',
  resourceId: 'resourceId'
};

exports.Prisma.LibraryCertificateScalarFieldEnum = {
  id: 'id',
  title: 'title',
  imageUrl: 'imageUrl',
  issuedAt: 'issuedAt',
  userId: 'userId',
  resourceId: 'resourceId'
};

exports.Prisma.LibraryCategoryScalarFieldEnum = {
  id: 'id',
  name: 'name',
  description: 'description',
  color: 'color',
  isActive: 'isActive',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.ProjectManagerScalarFieldEnum = {
  id: 'id',
  userId: 'userId'
};

exports.Prisma.ResourceScalarFieldEnum = {
  id: 'id',
  name: 'name',
  description: 'description',
  resourceType: 'resourceType',
  inspirationLinks: 'inspirationLinks',
  referenceLinks: 'referenceLinks',
  tags: 'tags',
  status: 'status',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  clientId: 'clientId',
  mediaSpecificationsId: 'mediaSpecificationsId',
  brandingGuidelinesId: 'brandingGuidelinesId',
  projectId: 'projectId'
};

exports.Prisma.MediaSpecificationsScalarFieldEnum = {
  id: 'id',
  videoType: 'videoType',
  audioType: 'audioType',
  designType: 'designType',
  codeType: 'codeType'
};

exports.Prisma.BrandingGuidelinesScalarFieldEnum = {
  id: 'id',
  primaryColor: 'primaryColor',
  secondaryColor: 'secondaryColor',
  accentColors: 'accentColors',
  typography: 'typography',
  logoUrl: 'logoUrl',
  brandVoice: 'brandVoice',
  styleGuideUrl: 'styleGuideUrl'
};

exports.Prisma.ProjectScalarFieldEnum = {
  id: 'id',
  name: 'name',
  description: 'description',
  status: 'status',
  startDate: 'startDate',
  endDate: 'endDate',
  budget: 'budget',
  creatorId: 'creatorId',
  projectManagerId: 'projectManagerId',
  clientId: 'clientId',
  budgetInfoId: 'budgetInfoId',
  kanbanBoardId: 'kanbanBoardId',
  terminationInfoId: 'terminationInfoId',
  Color: 'Color',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  requestId: 'requestId'
};

exports.Prisma.TaskScalarFieldEnum = {
  id: 'id',
  title: 'title',
  description: 'description',
  status: 'status',
  priority: 'priority',
  dueDate: 'dueDate',
  estimatedHours: 'estimatedHours',
  actualHours: 'actualHours',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  assignedToId: 'assignedToId',
  assignedById: 'assignedById',
  assignedAt: 'assignedAt',
  parentTaskId: 'parentTaskId',
  freelancerId: 'freelancerId',
  projectManagerId: 'projectManagerId',
  milestoneId: 'milestoneId',
  kanbanColumnId: 'kanbanColumnId',
  projectId: 'projectId',
  activityId: 'activityId'
};

exports.Prisma.SubTaskScalarFieldEnum = {
  id: 'id',
  title: 'title',
  completed: 'completed',
  parentTaskId: 'parentTaskId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.ProjectActivityScalarFieldEnum = {
  id: 'id',
  type: 'type',
  description: 'description',
  createdAt: 'createdAt',
  userId: 'userId',
  projectId: 'projectId',
  taskId: 'taskId'
};

exports.Prisma.TimeLogScalarFieldEnum = {
  id: 'id',
  startTime: 'startTime',
  endTime: 'endTime',
  taskId: 'taskId',
  userId: 'userId',
  projectId: 'projectId',
  freelancerId: 'freelancerId'
};

exports.Prisma.JobTimerScalarFieldEnum = {
  id: 'id',
  startTime: 'startTime',
  endTime: 'endTime',
  taskId: 'taskId',
  userId: 'userId',
  status: 'status',
  duration: 'duration'
};

exports.Prisma.BudgetInformationScalarFieldEnum = {
  id: 'id',
  budget: 'budget',
  currency: 'currency',
  paymentMethod: 'paymentMethod',
  paymentFrequency: 'paymentFrequency',
  budgetStatus: 'budgetStatus',
  budgetDate: 'budgetDate',
  freelancerBudget: 'freelancerBudget',
  freelancerBudgetPercentage: 'freelancerBudgetPercentage',
  companyBudget: 'companyBudget'
};

exports.Prisma.ProjectTeamScalarFieldEnum = {
  id: 'id',
  projectId: 'projectId'
};

exports.Prisma.CommentScalarFieldEnum = {
  id: 'id',
  content: 'content',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  taskId: 'taskId',
  authorId: 'authorId',
  mentions: 'mentions'
};

exports.Prisma.MilestoneScalarFieldEnum = {
  id: 'id',
  name: 'name',
  description: 'description',
  dueDate: 'dueDate',
  status: 'status',
  projectId: 'projectId'
};

exports.Prisma.DocumentScalarFieldEnum = {
  id: 'id',
  name: 'name',
  path: 'path',
  uploadedAt: 'uploadedAt',
  uploadedById: 'uploadedById'
};

exports.Prisma.ProjectDocumentScalarFieldEnum = {
  id: 'id',
  fileName: 'fileName',
  description: 'description',
  fileURL: 'fileURL',
  fileSize: 'fileSize',
  fileType: 'fileType',
  uploadedById: 'uploadedById',
  uploadedAt: 'uploadedAt',
  taskId: 'taskId',
  freelancerId: 'freelancerId',
  projectId: 'projectId',
  folderId: 'folderId'
};

exports.Prisma.DocumentFolderScalarFieldEnum = {
  id: 'id',
  name: 'name',
  description: 'description',
  projectId: 'projectId',
  createdAt: 'createdAt',
  createdById: 'createdById',
  parentId: 'parentId'
};

exports.Prisma.DocumentVersionScalarFieldEnum = {
  id: 'id',
  documentId: 'documentId',
  versionNumber: 'versionNumber',
  fileURL: 'fileURL',
  fileSize: 'fileSize',
  changedById: 'changedById',
  changeNotes: 'changeNotes',
  createdAt: 'createdAt'
};

exports.Prisma.MeetingScalarFieldEnum = {
  id: 'id',
  title: 'title',
  description: 'description',
  startTime: 'startTime',
  endTime: 'endTime',
  status: 'status',
  organizerId: 'organizerId',
  projectId: 'projectId',
  isClientInitiated: 'isClientInitiated',
  meetingLink: 'meetingLink',
  meetingNotes: 'meetingNotes',
  meetingAgenda: 'meetingAgenda',
  reminderSent: 'reminderSent',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.AuditLogScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  action: 'action',
  timestamp: 'timestamp',
  projectId: 'projectId',
  details: 'details',
  createdAt: 'createdAt'
};

exports.Prisma.ProjectRequestScalarFieldEnum = {
  id: 'id',
  title: 'title',
  description: 'description',
  timeline: 'timeline',
  requirements: 'requirements',
  reviewNotes: 'reviewNotes',
  clientId: 'clientId',
  resourceId: 'resourceId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  status: 'status',
  projectId: 'projectId',
  approvedAt: 'approvedAt'
};

exports.Prisma.AttachmentScalarFieldEnum = {
  id: 'id',
  filename: 'filename',
  originalName: 'originalName',
  mimeType: 'mimeType',
  size: 'size',
  path: 'path',
  url: 'url',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  taskId: 'taskId',
  commentId: 'commentId'
};

exports.Prisma.KanbanBoardScalarFieldEnum = {
  id: 'id',
  name: 'name',
  projectId: 'projectId'
};

exports.Prisma.KanbanColumnScalarFieldEnum = {
  id: 'id',
  name: 'name',
  order: 'order',
  boardId: 'boardId'
};

exports.Prisma.FavoriteScalarFieldEnum = {
  id: 'id',
  taskId: 'taskId',
  userId: 'userId',
  projectId: 'projectId'
};

exports.Prisma.DeliverableScalarFieldEnum = {
  id: 'id',
  projectId: 'projectId',
  taskId: 'taskId',
  title: 'title',
  description: 'description',
  dueDate: 'dueDate',
  status: 'status',
  priority: 'priority',
  attachments: 'attachments',
  version: 'version',
  revisionNotes: 'revisionNotes',
  clientApproval: 'clientApproval',
  feedbackRequired: 'feedbackRequired',
  completionDate: 'completionDate',
  acceptanceDate: 'acceptanceDate',
  revisionRequests: 'revisionRequests',
  finalPaymentStatus: 'finalPaymentStatus',
  metrics: 'metrics',
  rating: 'rating',
  clientFeedback: 'clientFeedback',
  likes: 'likes',
  shares: 'shares',
  views: 'views',
  downloads: 'downloads',
  sales: 'sales',
  conversions: 'conversions',
  watchTime: 'watchTime',
  retentionRate: 'retentionRate',
  clickThroughRate: 'clickThroughRate',
  conversionRate: 'conversionRate',
  engagement: 'engagement',
  demographics: 'demographics',
  geographicDistribution: 'geographicDistribution',
  deviceStats: 'deviceStats',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.DeliverableFeedbackScalarFieldEnum = {
  id: 'id',
  deliverableId: 'deliverableId',
  userId: 'userId',
  feedback: 'feedback',
  attachments: 'attachments',
  status: 'status',
  isReadByPM: 'isReadByPM',
  isReadByClient: 'isReadByClient',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.DeliverableCommentScalarFieldEnum = {
  id: 'id',
  deliverableId: 'deliverableId',
  userId: 'userId',
  content: 'content',
  attachments: 'attachments',
  parentId: 'parentId',
  mentions: 'mentions',
  isReadBy: 'isReadBy',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.VideoTaskRequestScalarFieldEnum = {
  id: 'id',
  title: 'title',
  description: 'description',
  additionalInfo: 'additionalInfo',
  outcomes: 'outcomes',
  videoType: 'videoType',
  requestedLength: 'requestedLength',
  priority: 'priority',
  deadline: 'deadline',
  mediaSource: 'mediaSource',
  mediaUrl: 'mediaUrl',
  subtitlesNeeded: 'subtitlesNeeded',
  voiceoverNeeded: 'voiceoverNeeded',
  scriptProvided: 'scriptProvided',
  musicProvided: 'musicProvided',
  clientId: 'clientId',
  projectId: 'projectId',
  status: 'status',
  createdTaskId: 'createdTaskId',
  reviewNotes: 'reviewNotes',
  approvedAt: 'approvedAt',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.GuestScheduleScalarFieldEnum = {
  id: 'id',
  email: 'email',
  firstName: 'firstName',
  lastName: 'lastName',
  companyName: 'companyName',
  phoneNumber: 'phoneNumber',
  currentEditingSolution: 'currentEditingSolution',
  frustrations: 'frustrations',
  monthlyPlanPreference: 'monthlyPlanPreference',
  notes: 'notes',
  country: 'country',
  scheduledDate: 'scheduledDate',
  duration: 'duration',
  timeZone: 'timeZone',
  meetingType: 'meetingType',
  meetingLink: 'meetingLink',
  status: 'status',
  isActive: 'isActive',
  reminderSent: 'reminderSent',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  canceledAt: 'canceledAt'
};

exports.Prisma.SystemSettingsScalarFieldEnum = {
  id: 'id',
  creditPerReferral: 'creditPerReferral',
  referralExpirationDays: 'referralExpirationDays',
  minPurchaseForCredit: 'minPurchaseForCredit',
  referralBonusOnPurchase: 'referralBonusOnPurchase',
  createdAt: 'createdAt'
};

exports.Prisma.FeatureFlagScalarFieldEnum = {
  id: 'id',
  name: 'name',
  description: 'description',
  isEnabled: 'isEnabled',
  percentage: 'percentage',
  rules: 'rules',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.ReferralScalarFieldEnum = {
  id: 'id',
  referringClientId: 'referringClientId',
  referredClientId: 'referredClientId',
  referredIp: 'referredIp',
  referredUserAgent: 'referredUserAgent',
  referredLocation: 'referredLocation',
  referralDate: 'referralDate',
  status: 'status',
  discountCredits: 'discountCredits',
  discountApplied: 'discountApplied',
  expiryDate: 'expiryDate',
  notes: 'notes',
  referralLink: 'referralLink',
  couponCode: 'couponCode',
  linkClicks: 'linkClicks',
  signups: 'signups',
  activeUsers: 'activeUsers',
  rewardsEarned: 'rewardsEarned',
  lastClickedAt: 'lastClickedAt',
  isCompleted: 'isCompleted',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.ReferralClickScalarFieldEnum = {
  id: 'id',
  referralId: 'referralId',
  clickedAt: 'clickedAt',
  ipAddress: 'ipAddress',
  userAgent: 'userAgent',
  location: 'location',
  converted: 'converted'
};

exports.Prisma.ReferralAnalyticsScalarFieldEnum = {
  id: 'id',
  referralId: 'referralId',
  conversionRate: 'conversionRate',
  averageSpend: 'averageSpend',
  retentionRate: 'retentionRate',
  campaignSource: 'campaignSource',
  deviceBreakdown: 'deviceBreakdown',
  locationData: 'locationData',
  timeToConversion: 'timeToConversion',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.PlanStatisticsScalarFieldEnum = {
  id: 'id',
  totalProjects: 'totalProjects',
  totalClients: 'totalClients',
  totalEarnings: 'totalEarnings'
};

exports.Prisma.CreditTransactionScalarFieldEnum = {
  id: 'id',
  clientId: 'clientId',
  type: 'type',
  amount: 'amount',
  remaining: 'remaining',
  expirationDate: 'expirationDate',
  description: 'description',
  subscriptionId: 'subscriptionId',
  referralId: 'referralId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.CreditUsageAnalyticsScalarFieldEnum = {
  id: 'id',
  clientId: 'clientId',
  period: 'period',
  totalUsed: 'totalUsed',
  byServiceType: 'byServiceType',
  peakUsageDays: 'peakUsageDays',
  unusualActivity: 'unusualActivity',
  createdAt: 'createdAt'
};

exports.Prisma.CustomPlanRequestScalarFieldEnum = {
  id: 'id',
  clientId: 'clientId',
  requestedCredits: 'requestedCredits',
  requestedBrands: 'requestedBrands',
  durationMonths: 'durationMonths',
  status: 'status',
  stripePaymentLink: 'stripePaymentLink',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.SubscriptionHistoryScalarFieldEnum = {
  id: 'id',
  subscriptionId: 'subscriptionId',
  planId: 'planId',
  priceId: 'priceId',
  status: 'status',
  startDate: 'startDate',
  endDate: 'endDate',
  reason: 'reason',
  createdAt: 'createdAt'
};

exports.Prisma.SubscriptionScalarFieldEnum = {
  id: 'id',
  clientId: 'clientId',
  planId: 'planId',
  priceId: 'priceId',
  customCredits: 'customCredits',
  status: 'status',
  invoiceId: 'invoiceId',
  currentPeriodStart: 'currentPeriodStart',
  currentPeriodEnd: 'currentPeriodEnd',
  baseCreditsUsed: 'baseCreditsUsed',
  referralCreditsUsed: 'referralCreditsUsed',
  brandsUsed: 'brandsUsed',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.PlanScalarFieldEnum = {
  id: 'id',
  name: 'name',
  description: 'description',
  isCustom: 'isCustom',
  planStatisticsId: 'planStatisticsId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.PlanFeatureScalarFieldEnum = {
  id: 'id',
  planId: 'planId',
  featureId: 'featureId',
  value: 'value',
  expirationPolicy: 'expirationPolicy',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.FeatureScalarFieldEnum = {
  id: 'id',
  name: 'name',
  description: 'description',
  key: 'key',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.PlanPriceScalarFieldEnum = {
  id: 'id',
  planId: 'planId',
  credits: 'credits',
  amount: 'amount',
  billingCycle: 'billingCycle',
  isActive: 'isActive',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.CreditValueScalarFieldEnum = {
  id: 'id',
  serviceType: 'serviceType',
  name: 'name',
  description: 'description',
  baseUnit: 'baseUnit',
  creditsPerUnit: 'creditsPerUnit',
  minUnits: 'minUnits',
  maxUnits: 'maxUnits',
  tieredPricing: 'tieredPricing',
  isActive: 'isActive',
  category: 'category',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.CreditConsumptionScalarFieldEnum = {
  id: 'id',
  subscriptionId: 'subscriptionId',
  serviceId: 'serviceId',
  units: 'units',
  unitType: 'unitType',
  creditRate: 'creditRate',
  totalCredits: 'totalCredits',
  discountApplied: 'discountApplied',
  creditType: 'creditType',
  referralCreditId: 'referralCreditId',
  description: 'description',
  createdAt: 'createdAt'
};

exports.Prisma.ReferralCreditScalarFieldEnum = {
  id: 'id',
  subscriptionId: 'subscriptionId',
  creditAmount: 'creditAmount',
  referralDate: 'referralDate',
  expiresAt: 'expiresAt',
  referredUserEmail: 'referredUserEmail',
  status: 'status',
  consumedInId: 'consumedInId'
};

exports.Prisma.BrandConsumptionScalarFieldEnum = {
  id: 'id',
  subscriptionId: 'subscriptionId',
  brandId: 'brandId',
  action: 'action',
  expiresAt: 'expiresAt',
  createdAt: 'createdAt'
};

exports.Prisma.DiscountScalarFieldEnum = {
  id: 'id',
  code: 'code',
  name: 'name',
  description: 'description',
  type: 'type',
  value: 'value',
  maxDiscount: 'maxDiscount',
  minRequirement: 'minRequirement',
  appliesTo: 'appliesTo',
  planIds: 'planIds',
  serviceTypes: 'serviceTypes',
  validFrom: 'validFrom',
  validUntil: 'validUntil',
  schedule: 'schedule',
  timezone: 'timezone',
  maxUses: 'maxUses',
  userMaxUses: 'userMaxUses',
  isActive: 'isActive',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.HolidayDiscountRuleScalarFieldEnum = {
  id: 'id',
  discountId: 'discountId',
  holidayName: 'holidayName',
  date: 'date',
  isRecurring: 'isRecurring',
  multiplier: 'multiplier',
  createdAt: 'createdAt'
};

exports.Prisma.DiscountRedemptionScalarFieldEnum = {
  id: 'id',
  discountId: 'discountId',
  subscriptionId: 'subscriptionId',
  clientId: 'clientId',
  appliedTo: 'appliedTo',
  appliedAmount: 'appliedAmount',
  creditValueId: 'creditValueId',
  createdAt: 'createdAt'
};

exports.Prisma.PlanInformationScalarFieldEnum = {
  id: 'id',
  planId: 'planId',
  displayName: 'displayName',
  shortDescription: 'shortDescription',
  priceDescription: 'priceDescription',
  highlight: 'highlight',
  mostPopular: 'mostPopular',
  buttonText: 'buttonText',
  order: 'order',
  monthlyPrice: 'monthlyPrice',
  annualPrice: 'annualPrice',
  creditIncluded: 'creditIncluded',
  isCustom: 'isCustom',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.PlanFeatureDisplayScalarFieldEnum = {
  id: 'id',
  planInfoId: 'planInfoId',
  featureText: 'featureText',
  isAvailable: 'isAvailable',
  isHighlight: 'isHighlight',
  tooltip: 'tooltip',
  order: 'order',
  createdAt: 'createdAt'
};

exports.Prisma.PlanComparisonScalarFieldEnum = {
  id: 'id',
  title: 'title',
  description: 'description',
  featuredPlanId: 'featuredPlanId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.SessionScalarFieldEnum = {
  id: 'id',
  sid: 'sid',
  data: 'data',
  expiresAt: 'expiresAt',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  userId: 'userId'
};

exports.Prisma.UserScalarFieldEnum = {
  id: 'id',
  email: 'email',
  password: 'password',
  firstName: 'firstName',
  middleName: 'middleName',
  lastName: 'lastName',
  role: 'role',
  isEmailVerified: 'isEmailVerified',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  provider: 'provider',
  providerId: 'providerId',
  avatar: 'avatar',
  status: 'status'
};

exports.Prisma.TokenScalarFieldEnum = {
  id: 'id',
  token: 'token',
  type: 'type',
  expires: 'expires',
  blacklisted: 'blacklisted',
  email: 'email',
  userId: 'userId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.AddressScalarFieldEnum = {
  id: 'id',
  street: 'street',
  city: 'city',
  state: 'state',
  country: 'country',
  postalCode: 'postalCode',
  userId: 'userId'
};

exports.Prisma.SecurityScalarFieldEnum = {
  id: 'id',
  twoFactorEnabled: 'twoFactorEnabled',
  isCodeVerified: 'isCodeVerified',
  twoFactorSecret: 'twoFactorSecret',
  backupCodes: 'backupCodes',
  userId: 'userId'
};

exports.Prisma.UserPreferencesScalarFieldEnum = {
  id: 'id',
  color: 'color',
  theme: 'theme',
  layout: 'layout',
  fontSize: 'fontSize',
  language: 'language',
  timezone: 'timezone',
  emailFrequency: 'emailFrequency',
  dateFormat: 'dateFormat',
  timeFormat: 'timeFormat',
  privacyId: 'privacyId',
  userId: 'userId'
};

exports.Prisma.PrivacyScalarFieldEnum = {
  id: 'id',
  analyticsSharing: 'analyticsSharing',
  personalizedAds: 'personalizedAds',
  dataRetention: 'dataRetention'
};

exports.Prisma.NotificationPreferencesScalarFieldEnum = {
  id: 'id',
  emailEnabled: 'emailEnabled',
  pushEnabled: 'pushEnabled',
  smsEnabled: 'smsEnabled',
  accountActivity: 'accountActivity',
  newFeatures: 'newFeatures',
  marketing: 'marketing',
  frequency: 'frequency',
  quietHoursStart: 'quietHoursStart',
  quietHoursEnd: 'quietHoursEnd',
  userId: 'userId'
};

exports.Prisma.UserLoginAuditScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  email: 'email',
  ip: 'ip',
  organization: 'organization',
  asn: 'asn',
  city: 'city',
  region: 'region',
  country: 'country',
  latitude: 'latitude',
  longitude: 'longitude',
  timezone: 'timezone',
  userAgent: 'userAgent',
  platform: 'platform',
  host: 'host',
  currency: 'currency',
  language: 'language',
  loginTime: 'loginTime'
};

exports.Prisma.ApiUsageScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  endpoint: 'endpoint',
  method: 'method',
  status: 'status',
  duration: 'duration',
  timestamp: 'timestamp',
  ipAddress: 'ipAddress',
  userAgent: 'userAgent'
};

exports.Prisma.SortOrder = {
  asc: 'asc',
  desc: 'desc'
};

exports.Prisma.NullableJsonNullValueInput = {
  DbNull: Prisma.DbNull,
  JsonNull: Prisma.JsonNull
};

exports.Prisma.JsonNullValueInput = {
  JsonNull: Prisma.JsonNull
};

exports.Prisma.QueryMode = {
  default: 'default',
  insensitive: 'insensitive'
};

exports.Prisma.JsonNullValueFilter = {
  DbNull: Prisma.DbNull,
  JsonNull: Prisma.JsonNull,
  AnyNull: Prisma.AnyNull
};

exports.Prisma.NullsOrder = {
  first: 'first',
  last: 'last'
};
exports.NotificationType = exports.$Enums.NotificationType = {
  INFO: 'INFO',
  SUCCESS: 'SUCCESS',
  WARNING: 'WARNING',
  ERROR: 'ERROR',
  SYSTEM: 'SYSTEM',
  PROJECT: 'PROJECT',
  TASK: 'TASK',
  PAYMENT: 'PAYMENT',
  CHAT: 'CHAT',
  SECURITY: 'SECURITY'
};

exports.ClientType = exports.$Enums.ClientType = {
  INDIVIDUAL: 'INDIVIDUAL',
  COMPANY: 'COMPANY'
};

exports.PaymentStatusType = exports.$Enums.PaymentStatusType = {
  DRAFT: 'DRAFT',
  PENDING: 'PENDING',
  SENT: 'SENT',
  PAID: 'PAID',
  OVERDUE: 'OVERDUE',
  REJECTED: 'REJECTED',
  REFUNDED: 'REFUNDED',
  CANCELLED: 'CANCELLED',
  PARTIALLY_PAID: 'PARTIALLY_PAID',
  DISPUTED: 'DISPUTED'
};

exports.PaymentMethodType = exports.$Enums.PaymentMethodType = {
  CREDIT_CARD: 'CREDIT_CARD',
  BANK_TRANSFER: 'BANK_TRANSFER',
  PAYPAL: 'PAYPAL'
};

exports.TransactionType = exports.$Enums.TransactionType = {
  SUBSCRIPTION: 'SUBSCRIPTION',
  REFERRAL: 'REFERRAL',
  USAGE: 'USAGE'
};

exports.BillingEventType = exports.$Enums.BillingEventType = {
  SUBSCRIPTION_CREATED: 'SUBSCRIPTION_CREATED',
  SUBSCRIPTION_RENEWED: 'SUBSCRIPTION_RENEWED',
  SUBSCRIPTION_CANCELED: 'SUBSCRIPTION_CANCELED',
  SUBSCRIPTION_UPGRADED: 'SUBSCRIPTION_UPGRADED',
  SUBSCRIPTION_DOWNGRADED: 'SUBSCRIPTION_DOWNGRADED',
  PAYMENT_SUCCEEDED: 'PAYMENT_SUCCEEDED',
  PAYMENT_FAILED: 'PAYMENT_FAILED',
  REFUND_ISSUED: 'REFUND_ISSUED',
  CREDIT_APPLIED: 'CREDIT_APPLIED',
  INVOICE_CREATED: 'INVOICE_CREATED',
  INVOICE_PAID: 'INVOICE_PAID',
  INVOICE_OVERDUE: 'INVOICE_OVERDUE',
  MANUAL_ADJUSTMENT: 'MANUAL_ADJUSTMENT'
};

exports.FreelancerStatus = exports.$Enums.FreelancerStatus = {
  PENDING: 'PENDING',
  APPROVED: 'APPROVED',
  REJECTED: 'REJECTED',
  SUSPENDED: 'SUSPENDED',
  TERMINATED: 'TERMINATED'
};

exports.SkillType = exports.$Enums.SkillType = {
  VIDEO: 'VIDEO',
  PROGRAMMING: 'PROGRAMMING',
  DESIGN: 'DESIGN',
  WRITING: 'WRITING',
  MARKETING: 'MARKETING'
};

exports.VideoType = exports.$Enums.VideoType = {
  VSL: 'VSL',
  UGC: 'UGC',
  DRA: 'DRA',
  AIV: 'AIV'
};

exports.ProgrammingType = exports.$Enums.ProgrammingType = {
  FRONTEND: 'FRONTEND',
  BACKEND: 'BACKEND',
  MOBILE: 'MOBILE',
  FULLSTACK: 'FULLSTACK'
};

exports.DesignType = exports.$Enums.DesignType = {
  UI_UX: 'UI_UX',
  GRAPHIC: 'GRAPHIC',
  MOTION: 'MOTION'
};

exports.WritingType = exports.$Enums.WritingType = {
  TECHNICAL: 'TECHNICAL',
  CREATIVE: 'CREATIVE',
  CONTENT: 'CONTENT'
};

exports.MarketingType = exports.$Enums.MarketingType = {
  SOCIAL: 'SOCIAL',
  EMAIL: 'EMAIL',
  SEO: 'SEO'
};

exports.AvailabilityStatus = exports.$Enums.AvailabilityStatus = {
  AVAILABLE: 'AVAILABLE',
  UNAVAILABLE: 'UNAVAILABLE'
};

exports.TerminationType = exports.$Enums.TerminationType = {
  FREELANCER: 'FREELANCER',
  CLIENT: 'CLIENT',
  SUPPORT: 'SUPPORT',
  INVESTOR: 'INVESTOR',
  PROJ: 'PROJ'
};

exports.BankAccountType = exports.$Enums.BankAccountType = {
  CHECKING: 'CHECKING',
  SAVINGS: 'SAVINGS'
};

exports.PaymentFrequencyType = exports.$Enums.PaymentFrequencyType = {
  MONTHLY: 'MONTHLY',
  WEEKLY: 'WEEKLY',
  DAILY: 'DAILY'
};

exports.ClientFreelancerStatus = exports.$Enums.ClientFreelancerStatus = {
  ACTIVE: 'ACTIVE',
  PAST: 'PAST',
  SAVED: 'SAVED'
};

exports.LibResourceStatus = exports.$Enums.LibResourceStatus = {
  DRAFT: 'DRAFT',
  PUBLISHED: 'PUBLISHED',
  ARCHIVED: 'ARCHIVED'
};

exports.LibDifficultyLevel = exports.$Enums.LibDifficultyLevel = {
  BEGINNER: 'BEGINNER',
  INTERMEDIATE: 'INTERMEDIATE',
  ADVANCED: 'ADVANCED'
};

exports.LibAttachmentType = exports.$Enums.LibAttachmentType = {
  PDF: 'PDF',
  VIDEO: 'VIDEO',
  LINK: 'LINK',
  IMAGE: 'IMAGE',
  OTHER: 'OTHER'
};

exports.LibReactionType = exports.$Enums.LibReactionType = {
  LIKE: 'LIKE',
  DISLIKE: 'DISLIKE'
};

exports.ResourceType = exports.$Enums.ResourceType = {
  VIDEO: 'VIDEO',
  DESIGN: 'DESIGN',
  AUDIO: 'AUDIO',
  DOCUMENT: 'DOCUMENT',
  CODE: 'CODE',
  OTHER: 'OTHER'
};

exports.ResourceStatus = exports.$Enums.ResourceStatus = {
  DRAFT: 'DRAFT',
  ACTIVE: 'ACTIVE',
  ARCHIVED: 'ARCHIVED'
};

exports.AudioType = exports.$Enums.AudioType = {
  MUSIC: 'MUSIC',
  VOICEOVER: 'VOICEOVER',
  SOUND_EFFECTS: 'SOUND_EFFECTS',
  PODCAST: 'PODCAST'
};

exports.ProjectStatusType = exports.$Enums.ProjectStatusType = {
  PLANNING: 'PLANNING',
  IN_PROGRESS: 'IN_PROGRESS',
  REVIEW: 'REVIEW',
  COMPLETED: 'COMPLETED',
  ON_HOLD: 'ON_HOLD',
  CANCELLED: 'CANCELLED',
  PAUSED: 'PAUSED',
  COMPLETED_WITH_ISSUES: 'COMPLETED_WITH_ISSUES',
  ARCHIVED: 'ARCHIVED',
  PENDING: 'PENDING',
  FAILED: 'FAILED'
};

exports.TaskStatus = exports.$Enums.TaskStatus = {
  TODO: 'TODO',
  IN_PROGRESS: 'IN_PROGRESS',
  SUBMITTED_FOR_REVIEW: 'SUBMITTED_FOR_REVIEW',
  CHANGES_REQUESTED: 'CHANGES_REQUESTED',
  REVISION_IN_PROGRESS: 'REVISION_IN_PROGRESS',
  APPROVED: 'APPROVED',
  FINAL_REVIEW: 'FINAL_REVIEW',
  COMPLETED: 'COMPLETED',
  CANCELLED: 'CANCELLED',
  ON_HOLD: 'ON_HOLD'
};

exports.TaskPriorityType = exports.$Enums.TaskPriorityType = {
  LOW: 'LOW',
  MEDIUM: 'MEDIUM',
  HIGH: 'HIGH',
  URGENT: 'URGENT'
};

exports.ProjectActivityType = exports.$Enums.ProjectActivityType = {
  JOINED: 'JOINED',
  MOVED: 'MOVED',
  COMMENTED: 'COMMENTED',
  UPDATED: 'UPDATED',
  CREATED: 'CREATED',
  DELETED: 'DELETED'
};

exports.JobTimerStatus = exports.$Enums.JobTimerStatus = {
  ACTIVE: 'ACTIVE',
  PAUSED: 'PAUSED',
  COMPLETED: 'COMPLETED'
};

exports.MeetingStatus = exports.$Enums.MeetingStatus = {
  SCHEDULED: 'SCHEDULED',
  ONGOING: 'ONGOING',
  COMPLETED: 'COMPLETED',
  CANCELLED: 'CANCELLED',
  POSTPONED: 'POSTPONED'
};

exports.AuditActionType = exports.$Enums.AuditActionType = {
  CREATE: 'CREATE',
  UPDATE: 'UPDATE',
  DELETE: 'DELETE',
  LOGIN: 'LOGIN',
  LOGOUT: 'LOGOUT',
  VIEW: 'VIEW',
  COMMENT: 'COMMENT',
  UPLOAD: 'UPLOAD',
  DOWNLOAD: 'DOWNLOAD',
  PAYMENT: 'PAYMENT',
  REVIEW: 'REVIEW',
  REPORT: 'REPORT',
  REJECT: 'REJECT',
  APPROVE: 'APPROVE',
  SUSPEND: 'SUSPEND',
  TERMINATE: 'TERMINATE',
  REQUEST: 'REQUEST',
  RESPONSE: 'RESPONSE',
  REQUEST_UPDATE: 'REQUEST_UPDATE',
  RESPONSE_UPDATE: 'RESPONSE_UPDATE'
};

exports.ProjectRequestStatusType = exports.$Enums.ProjectRequestStatusType = {
  IN_PROGRESS: 'IN_PROGRESS',
  APPROVED: 'APPROVED',
  REJECTED: 'REJECTED'
};

exports.DeliverableStatus = exports.$Enums.DeliverableStatus = {
  DRAFT: 'DRAFT',
  IN_PROGRESS: 'IN_PROGRESS',
  REVIEW: 'REVIEW',
  APPROVED: 'APPROVED',
  REJECTED: 'REJECTED',
  DELIVERED: 'DELIVERED'
};

exports.FeedbackStatus = exports.$Enums.FeedbackStatus = {
  PENDING: 'PENDING',
  ACKNOWLEDGED: 'ACKNOWLEDGED',
  IN_PROGRESS: 'IN_PROGRESS',
  RESOLVED: 'RESOLVED',
  REJECTED: 'REJECTED'
};

exports.MediaSource = exports.$Enums.MediaSource = {
  UPLOAD: 'UPLOAD',
  URL: 'URL',
  NO_MEDIA: 'NO_MEDIA'
};

exports.SubscriptionStatus = exports.$Enums.SubscriptionStatus = {
  ACTIVE: 'ACTIVE',
  CANCELED: 'CANCELED',
  EXPIRED: 'EXPIRED',
  PAUSED: 'PAUSED',
  TRIALING: 'TRIALING',
  PENDING: 'PENDING'
};

exports.BillingCycle = exports.$Enums.BillingCycle = {
  MONTHLY: 'MONTHLY',
  ANNUALLY: 'ANNUALLY'
};

exports.CreditType = exports.$Enums.CreditType = {
  BASE: 'BASE',
  REFERRAL: 'REFERRAL'
};

exports.ReferralCreditStatus = exports.$Enums.ReferralCreditStatus = {
  ACTIVE: 'ACTIVE',
  USED: 'USED',
  EXPIRED: 'EXPIRED'
};

exports.DiscountType = exports.$Enums.DiscountType = {
  PERCENTAGE: 'PERCENTAGE',
  FIXED_AMOUNT: 'FIXED_AMOUNT',
  CREDIT_BONUS: 'CREDIT_BONUS'
};

exports.DiscountTarget = exports.$Enums.DiscountTarget = {
  PLANS: 'PLANS',
  SERVICES: 'SERVICES',
  ALL: 'ALL',
  BUNDLES: 'BUNDLES'
};

exports.Role = exports.$Enums.Role = {
  SUPER_ADMIN: 'SUPER_ADMIN',
  ADMIN: 'ADMIN',
  PROJECT_MANAGER: 'PROJECT_MANAGER',
  FREELANCER: 'FREELANCER',
  CLIENT: 'CLIENT',
  SUPPORT: 'SUPPORT',
  INVESTOR: 'INVESTOR'
};

exports.UserStatus = exports.$Enums.UserStatus = {
  ACTIVE: 'ACTIVE',
  INACTIVE: 'INACTIVE',
  SUSPENDED: 'SUSPENDED',
  BANNED: 'BANNED'
};

exports.Prisma.ModelName = {
  Admin: 'Admin',
  ChatMessage: 'ChatMessage',
  ChatRoom: 'ChatRoom',
  Notification: 'Notification',
  NotificationTemplate: 'NotificationTemplate',
  Client: 'Client',
  ContactPerson: 'ContactPerson',
  Contract: 'Contract',
  File: 'File',
  PaymentTransaction: 'PaymentTransaction',
  PaymentAttempt: 'PaymentAttempt',
  BillingAddress: 'BillingAddress',
  BillingHistory: 'BillingHistory',
  FinancialSummary: 'FinancialSummary',
  TaxRate: 'TaxRate',
  Invoice: 'Invoice',
  InvoiceItem: 'InvoiceItem',
  Freelancer: 'Freelancer',
  Skill: 'Skill',
  Category: 'Category',
  Certification: 'Certification',
  WorkHistory: 'WorkHistory',
  Availability: 'Availability',
  TerminationInformation: 'TerminationInformation',
  PortfolioItem: 'PortfolioItem',
  PaymentInformation: 'PaymentInformation',
  StatisticsInformation: 'StatisticsInformation',
  ClientHiredFreelancer: 'ClientHiredFreelancer',
  Review: 'Review',
  LibraryResource: 'LibraryResource',
  LibrarySection: 'LibrarySection',
  LibraryAttachment: 'LibraryAttachment',
  LibraryResourceRelation: 'LibraryResourceRelation',
  LibraryComment: 'LibraryComment',
  LibraryReply: 'LibraryReply',
  LibraryReaction: 'LibraryReaction',
  LibraryProgress: 'LibraryProgress',
  LibraryFavorite: 'LibraryFavorite',
  LibraryPin: 'LibraryPin',
  LibraryCertificate: 'LibraryCertificate',
  LibraryCategory: 'LibraryCategory',
  ProjectManager: 'ProjectManager',
  Resource: 'Resource',
  MediaSpecifications: 'MediaSpecifications',
  BrandingGuidelines: 'BrandingGuidelines',
  Project: 'Project',
  Task: 'Task',
  SubTask: 'SubTask',
  ProjectActivity: 'ProjectActivity',
  TimeLog: 'TimeLog',
  JobTimer: 'JobTimer',
  BudgetInformation: 'BudgetInformation',
  ProjectTeam: 'ProjectTeam',
  Comment: 'Comment',
  Milestone: 'Milestone',
  Document: 'Document',
  ProjectDocument: 'ProjectDocument',
  DocumentFolder: 'DocumentFolder',
  DocumentVersion: 'DocumentVersion',
  Meeting: 'Meeting',
  AuditLog: 'AuditLog',
  ProjectRequest: 'ProjectRequest',
  Attachment: 'Attachment',
  KanbanBoard: 'KanbanBoard',
  KanbanColumn: 'KanbanColumn',
  Favorite: 'Favorite',
  Deliverable: 'Deliverable',
  DeliverableFeedback: 'DeliverableFeedback',
  DeliverableComment: 'DeliverableComment',
  VideoTaskRequest: 'VideoTaskRequest',
  GuestSchedule: 'GuestSchedule',
  SystemSettings: 'SystemSettings',
  FeatureFlag: 'FeatureFlag',
  Referral: 'Referral',
  ReferralClick: 'ReferralClick',
  ReferralAnalytics: 'ReferralAnalytics',
  PlanStatistics: 'PlanStatistics',
  CreditTransaction: 'CreditTransaction',
  CreditUsageAnalytics: 'CreditUsageAnalytics',
  CustomPlanRequest: 'CustomPlanRequest',
  SubscriptionHistory: 'SubscriptionHistory',
  Subscription: 'Subscription',
  Plan: 'Plan',
  PlanFeature: 'PlanFeature',
  Feature: 'Feature',
  PlanPrice: 'PlanPrice',
  CreditValue: 'CreditValue',
  CreditConsumption: 'CreditConsumption',
  ReferralCredit: 'ReferralCredit',
  BrandConsumption: 'BrandConsumption',
  Discount: 'Discount',
  HolidayDiscountRule: 'HolidayDiscountRule',
  DiscountRedemption: 'DiscountRedemption',
  PlanInformation: 'PlanInformation',
  PlanFeatureDisplay: 'PlanFeatureDisplay',
  PlanComparison: 'PlanComparison',
  Session: 'Session',
  User: 'User',
  Token: 'Token',
  Address: 'Address',
  Security: 'Security',
  UserPreferences: 'UserPreferences',
  Privacy: 'Privacy',
  NotificationPreferences: 'NotificationPreferences',
  UserLoginAudit: 'UserLoginAudit',
  ApiUsage: 'ApiUsage'
};

/**
 * This is a stub Prisma Client that will error at runtime if called.
 */
class PrismaClient {
  constructor() {
    return new Proxy(this, {
      get(target, prop) {
        let message
        const runtime = getRuntime()
        if (runtime.isEdge) {
          message = `PrismaClient is not configured to run in ${runtime.prettyName}. In order to run Prisma Client on edge runtime, either:
- Use Prisma Accelerate: https://pris.ly/d/accelerate
- Use Driver Adapters: https://pris.ly/d/driver-adapters
`;
        } else {
          message = 'PrismaClient is unable to run in this browser environment, or has been bundled for the browser (running in `' + runtime.prettyName + '`).'
        }

        message += `
If this is unexpected, please open an issue: https://pris.ly/prisma-prisma-bug-report`

        throw new Error(message)
      }
    })
  }
}

exports.PrismaClient = PrismaClient

Object.assign(exports, Prisma)
