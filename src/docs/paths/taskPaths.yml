paths:
  /tasks:
    post:
      summary: Create a new task
      tags:
        - Tasks
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - title
                - description
                - projectId
              properties:
                title:
                  type: string
                  description: Task title
                description:
                  type: string
                  description: Task description
                projectId:
                  type: string
                  description: Associated project ID
                assigneeId:
                  type: string
                  description: User ID of the assignee
                dueDate:
                  type: string
                  format: date-time
                  description: Task due date
                priority:
                  type: string
                  enum: [low, medium, high, urgent]
                  default: medium
                  description: Task priority
                status:
                  type: string
                  enum: [todo, in_progress, review, completed]
                  default: todo
                  description: Task status
                estimatedHours:
                  type: number
                  description: Estimated hours to complete
                tags:
                  type: array
                  items:
                    type: string
                  description: Task tags
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Task'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'

    get:
      summary: Get all tasks
      description: Get tasks with optional filtering
      tags:
        - Tasks
      security:
        - bearerAuth: []
      parameters:
        - in: query
          name: projectId
          schema:
            type: string
          description: Filter by project ID
        - in: query
          name: assigneeId
          schema:
            type: string
          description: Filter by assignee ID
        - in: query
          name: status
          schema:
            type: string
            enum: [todo, in_progress, review, completed]
          description: Filter by task status
        - in: query
          name: priority
          schema:
            type: string
            enum: [low, medium, high, urgent]
          description: Filter by priority
        - in: query
          name: dueDate
          schema:
            type: string
            format: date
          description: Filter by due date
        - in: query
          name: tags
          schema:
            type: array
            items:
              type: string
          style: form
          explode: true
          description: Filter by tags
        - in: query
          name: search
          schema:
            type: string
          description: Search in title and description
        - in: query
          name: sortBy
          schema:
            type: string
          description: Field to sort by
        - in: query
          name: sortOrder
          schema:
            type: string
            enum: [asc, desc]
          description: Sort order
        - in: query
          name: limit
          schema:
            type: integer
            minimum: 1
            default: 20
          description: Maximum number of results
        - in: query
          name: page
          schema:
            type: integer
            minimum: 1
            default: 1
          description: Page number
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  results:
                    type: array
                    items:
                      $ref: '#/components/schemas/Task'
                  page:
                    type: integer
                  limit:
                    type: integer
                  totalPages:
                    type: integer
                  totalResults:
                    type: integer
        '401':
          $ref: '#/components/responses/Unauthorized'

  /tasks/{taskId}:
    get:
      summary: Get task by ID
      tags:
        - Tasks
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: taskId
          required: true
          schema:
            type: string
          description: Task ID
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Task'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'

    patch:
      summary: Update task
      tags:
        - Tasks
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: taskId
          required: true
          schema:
            type: string
          description: Task ID
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                title:
                  type: string
                  description: Task title
                description:
                  type: string
                  description: Task description
                assigneeId:
                  type: string
                  description: User ID of the assignee
                dueDate:
                  type: string
                  format: date-time
                  description: Task due date
                priority:
                  type: string
                  enum: [low, medium, high, urgent]
                  description: Task priority
                status:
                  type: string
                  enum: [todo, in_progress, review, completed]
                  description: Task status
                estimatedHours:
                  type: number
                  description: Estimated hours to complete
                tags:
                  type: array
                  items:
                    type: string
                  description: Task tags
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Task'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'

    delete:
      summary: Delete task
      tags:
        - Tasks
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: taskId
          required: true
          schema:
            type: string
          description: Task ID
      responses:
        '204':
          description: No content
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'

  /tasks/{taskId}/status:
    patch:
      summary: Update task status
      tags:
        - Tasks
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: taskId
          required: true
          schema:
            type: string
          description: Task ID
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - status
              properties:
                status:
                  type: string
                  enum: [todo, in_progress, review, completed]
                  description: New task status
                comment:
                  type: string
                  description: Optional comment about the status change
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Task'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'

  /tasks/{taskId}/assignee:
    patch:
      summary: Update task assignee
      tags:
        - Tasks
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: taskId
          required: true
          schema:
            type: string
          description: Task ID
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - assigneeId
              properties:
                assigneeId:
                  type: string
                  description: User ID of the new assignee
                comment:
                  type: string
                  description: Optional comment about the assignee change
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Task'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'

  /tasks/{taskId}/comments:
    post:
      summary: Add comment to task
      tags:
        - Tasks
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: taskId
          required: true
          schema:
            type: string
          description: Task ID
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - content
              properties:
                content:
                  type: string
                  description: Comment content
                attachments:
                  type: array
                  items:
                    type: string
                  description: Optional array of attachment IDs
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TaskComment'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'

    get:
      summary: Get task comments
      tags:
        - Tasks
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: taskId
          required: true
          schema:
            type: string
          description: Task ID
        - in: query
          name: limit
          schema:
            type: integer
            minimum: 1
            default: 20
          description: Maximum number of results
        - in: query
          name: page
          schema:
            type: integer
            minimum: 1
            default: 1
          description: Page number
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  results:
                    type: array
                    items:
                      $ref: '#/components/schemas/TaskComment'
                  page:
                    type: integer
                  limit:
                    type: integer
                  totalPages:
                    type: integer
                  totalResults:
                    type: integer
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'

  /tasks/{taskId}/time-entries:
    post:
      summary: Add time entry to task
      tags:
        - Tasks
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: taskId
          required: true
          schema:
            type: string
          description: Task ID
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - hours
                - date
              properties:
                hours:
                  type: number
                  description: Hours worked
                date:
                  type: string
                  format: date
                  description: Date of work
                description:
                  type: string
                  description: Description of work done
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TimeEntry'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'

    get:
      summary: Get task time entries
      tags:
        - Tasks
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: taskId
          required: true
          schema:
            type: string
          description: Task ID
        - in: query
          name: startDate
          schema:
            type: string
            format: date
          description: Filter by start date
        - in: query
          name: endDate
          schema:
            type: string
            format: date
          description: Filter by end date
        - in: query
          name: userId
          schema:
            type: string
          description: Filter by user ID
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/TimeEntry'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'

  /tasks/time-entries/{entryId}:
    patch:
      summary: Update time entry
      tags:
        - Tasks
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: entryId
          required: true
          schema:
            type: string
          description: Time entry ID
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                hours:
                  type: number
                  description: Hours worked
                date:
                  type: string
                  format: date
                  description: Date of work
                description:
                  type: string
                  description: Description of work done
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TimeEntry'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'

    delete:
      summary: Delete time entry
      tags:
        - Tasks
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: entryId
          required: true
          schema:
            type: string
          description: Time entry ID
      responses:
        '204':
          description: No content
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
